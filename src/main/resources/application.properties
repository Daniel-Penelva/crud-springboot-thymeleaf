spring.datasource.url=jdbc:postgresql://localhost:5432/crud-springboot-thymeleaf
spring.datasource.username=postgres
spring.datasource.password=admin
spring.jpa.hibernate.ddl-auto=update

spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

# Configurações do Thymeleaf (OBS. Essas configurações não são necessárias, eu fiz para aprendizado)
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
spring.thymeleaf.cache=false
spring.thymeleaf.mode=HTML

# spring.thymeleaf.prefix -> Define o prefixo dos caminhos dos modelos (templates) do Thymeleaf. Ou seja, o valor 'classpath:/templates/' 
# localiza os templates HTML da minha aplicação.


# spring.thymeleaf.suffix -> Define o sufixo que será anexado aos nomes dos templates, ou seja, o valor .html indica que os modelos devem ter 
# extensão ".html". Portanto, ao usar a anotação @GetMapping("/lista-estudantes") e retornar "lista-estudantes", o Thymeleaf procurará por um 
# arquivo chamado lista-estudantes.html dentro da pasta definida pelo 'spring.thymeleaf.prefix'.

# spring.thymeleaf.cache -> propriedade controla se o cache de templates do Thymeleaf está habilitado ou desabilitado. Quando o cache está 
# ativado (valor padrão é true), o Thymeleaf armazena em cache os templates processados para melhorar o desempenho, evitando a necessidade de 
# recarregar o template a cada solicitação. Em um ambiente de desenvolvimento, é útil desativar o cache para que as alterações nos templates 
# sejam refletidas imediatamente sem a necessidade de reiniciar o aplicativo.

# spring.thymeleaf.mode -> Essa propriedade define o modo de processamento do Thymeleaf. O valor HTML indica que o Thymeleaf deve operar no modo 
# HTML. Isso significa que ele tratará os modelos como documentos HTML válidos e aplicará as regras de parsing e validação de HTML. Outros 
# valores possíveis incluem XML, que indica que o Thymeleaf deve operar no modo XML, tratando os modelos como documentos XML válidos.